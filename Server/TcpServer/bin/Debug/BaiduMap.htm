<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
    <meta name="viewport" content="initial-scale=1.0,user-scalable=no" />
    <title>百度地图的Hello World</title>
    <style type="text/css">
        body, html, #allmap {
            width: 100%;
            height: 100%;
            overflow: hidden;
            margin: 0;
        }

        #l-map {
            height: 100%;
            width: 78%;
            float: left;
            border-right: 2px solid #bcbcbc;
        }

        #r-result {
            height: 100%;
            width: 20%;
            float: left;
        }
    </style>
    <!--<script type="text/javascript" src="http://api.map.baidu.com/api?v=2.0&ak=6c497f51c06477544e5fa6e9bd68f7c3"></script>-->
    <script type="text/javascript" src="http://api.map.baidu.com/api?v=2.0&ak=HMI66t6Rgr2OGKteUD5acH2pHS8GPMkh"></script>
    <script type="text/javascript" src="http://api.map.baidu.com/library/GeoUtils/1.2/src/GeoUtils_min.js"></script>
    <script type="text/javascript" src="http://api.map.baidu.com/library/DrawingManager/1.4/src/DrawingManager_min.js"></script>
    <link rel="stylesheet" href="http://api.map.baidu.com/library/DrawingManager/1.4/src/DrawingManager_min.css" />

    <style type="text/css">
        .anchorBL {
            display: none;
        }
    </style>

</head>
<body>
    <div id="allmap">
    </div>
</body>
</html>
<script type="text/javascript">
    var map = new BMap.Map("allmap");               // 创建Map实例
    map.addControl(new BMap.NavigationControl());   // 添加平移缩放控件
    map.addControl(new BMap.ScaleControl());        // 添加比例尺控件
    map.addControl(new BMap.OverviewMapControl());  //添加缩略地图控件
    map.addControl(new BMap.MapTypeControl());      //添加地图类型控件
    map.setCurrentCity("合肥");                     //设置地图显示的城市
    map.enableScrollWheelZoom();                    //启用滚轮放大缩小


    var flag = true;
    var pointA;
    var pointB;
    var sum = 0;
    var circle;
    var local1;
    var marker;
    var rect;
    var time1;
    //map.addOverlay(marker);
    //marker.setAnimation(BMAP_ANIMATION_BOUNCE);
    var typeFlag = true;
    var overlays = [];
    var overlaycomplete = function (e) {
        overlays.push(e.overlay);
        e.overlay.addEventListener("click", function () {
            map.removeOverlay(e.overlay);
        })
        var num = 0, typeNum = 0;
        var allLays = map.getOverlays();        //得到所有的覆盖物
        for (var i = 0; i < allLays.length; i++)
        {

            var result = BMapLib.GeoUtils.isPointInPolygon(allLays[i].point, e.overlay);//区域内标志
            if (result)
            {
               
                if (allLays[i].toString() == "[object Circle]")      //所有定位标志
                {
                    num++;
                    if (typeFlag) {                       //标志类型计数
                        typeNum++;
                        typeFlag = false;                 
                    }
                }
                if(allLays[i].toString()=="[object Label]")
                {
                    window.external.write0(allLays[i].content);
                }
            }
            
        }
        typeFlag = true;
        alert("共有" + num + "个点," + typeNum + "条轨迹");
        
    };
    var styleOptions = {
        strokeColor: "blue",    //边线颜色。
        fillColor: "blue",      //填充颜色。当参数为空时，圆形将没有填充效果。
        strokeWeight: 1,       //边线的宽度，以像素为单位。
        strokeOpacity: 0.8,	   //边线透明度，取值范围0 - 1。
        fillOpacity: 0.4,      //填充的透明度，取值范围0 - 1。
        strokeStyle: 'solid' //边线的样式，solid或dashed。
    }
    //实例化鼠标绘制工具
    var drawingManager = new BMapLib.DrawingManager(map, {
        isOpen: false, //是否开启绘制模式
        enableDrawingTool: true, //是否显示工具栏
        drawingToolOptions: {
            anchor: BMAP_ANCHOR_TOP_RIGHT, //位置
            offset: new BMap.Size(20, 30)
        },
        circleOptions: styleOptions, //圆的样式
        polylineOptions: styleOptions, //线的样式
        polygonOptions: styleOptions, //多边形的样式
        rectangleOptions: styleOptions //矩形的样式
    });
    //添加鼠标绘制工具监听事件，用于获取绘制结果
    drawingManager.addEventListener('overlaycomplete', overlaycomplete);
    function clearAll() {
        for (var i = 0; i < overlays.length; i++) {
            map.removeOverlay(overlays[i]);
        }
        overlays.length = 0
    }



    function initMap(x, y) {//参数：经纬度
        var point = new BMap.Point(x, y);
        map.centerAndZoom(point, 19);
        //map.clearOverlays()
    }
    //坐标转换完之后的回调函数
    translateCallback = function (data) {
        if (data.status === 0) {
            circle = new BMap.Circle(data.points[0], 1, { strokeColor: "red", strokeWeight: 2, strokeOpacity: 1 });
            map.addOverlay(circle);
            map.setCenter(data.points[0]);
            if (flag) {
                pointB = data.points[0];    //PB接收新数据
                var labelgg = new BMap.Label(time1, { offset: new BMap.Size(0, 0), position: data.points[0] });
                map.addOverlay(labelgg);
                labelgg.hide();
                flag = false;
            }
            else {
                pointA = pointB;           //PA保存历史数据
                pointB = data.points[0];
                var mm = map.getDistance(pointA, pointB);
                sum = sum + mm;
                var info = "当前距离" + mm.toFixed(2) + "米\n"
                    + "总距离" + sum.toFixed(2) + "米";

                var labelgg = new BMap.Label(time1+info, { offset: new BMap.Size(0, 0), position: data.points[0] });
                map.addOverlay(labelgg);
                labelgg.hide();
               
                var polyline = new BMap.Polyline([pointA, pointB], { strokeColor: "blue", strokeWeight: 2, strokeOpacity: 0.5 });  //定义折线
                map.addOverlay(polyline);     //添加折线到地图上
                
                polyline.addEventListener("click", function () {
                    labelgg.show();
                })
            }
        }
    }

    setTimeout(function locate(x, y, t) {
        var ggPoint = new BMap.Point(x, y);
        var convertor = new BMap.Convertor();
        time1 = t;
        var pointArr = [];
        pointArr.push(ggPoint);
        convertor.translate(pointArr, 1, 5, translateCallback)
    }, 500);
</script>

